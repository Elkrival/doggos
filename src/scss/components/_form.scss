.form{

 &__group:not(:last-child){
  margin-bottom: 2rem;
 }

 &__input{
  font-size: 1.5rem;
  font-family: inherit;
  // Input components don't have set the font that is used on the website it needs to be added manually, a way to set this easily is through the inherit value.
  padding: 1.5rem 2rem;
  color:inherit;
  border-radius: $small-border-radius;
  background-color: rgba($color-white, .5);
  border:none;
  border-bottom: 3px solid transparent;
  width:90%;
  display:block;
  transition: all .3s;
  &:focus{
   outline: none;
   // the outline for the input is the browser blue line
   box-shadow: 0 1rem 2rem rgba($color-black, .1);
   border-bottom: 3px solid $color-primary;


   &:valid{
    border-bottom: 3px solid $color-primary-dark;
   }
   &:invalid{
    border-bottom: 3px solid $color-tertiary-dark;
   }
  }
  &::-webkit-input-placeholder{
   color: $color-grey-dark-2;
  }

  /* These are two classes that are part of google chrome, they allow us to set the styles of the input when we have a required type on the html this. These states are valid and invalid.
        :valid pseudo class
       :invalid pseudo class
 */

 }


 //             The pseudo element -webkit-input-placeholder is a class that only works on chrome and safari.
 &__label{
  font-size: 1.2rem;
  font-weight: 700;
  margin-left: 2rem;
  margin-top: 1rem;
  display:block;
  transition: all .3s;
 }
// The adjacent sibling selector. In this example the label and the input are siblings, in order for us to style the placeholder we have to use the sibling selector because the label is not a child of the input, therefore we cannot nest or chain it as we usually have been. We are using the adjacent sibling we select the next of kin by using + The general sibling is ~ to select
// The sibling we have to select always has to be after the element..


 &__input:placeholder-shown + &__label{
  opacity:0;
  visibility: hidden;
  // we use visibility hidden to remove the element but we need to use opacity because visibility cannot be animated.
  transform: translateY(-4rem);
 }

 &__radio-group{
  width: 50%;
  display: inline-block;

 }
 &__radio-input{
  display: none;
 }
 &__radio-label{
  font-size: $default-font-size;
  cursor: pointer;
  position:relative;
  padding-left: 4.5rem;
 }
 &__radio-button{
  height: 3rem;
  width: 3rem;
  border:5px solid $color-primary-light;
  border-radius: 50%;
  display: inline-block;
  position:absolute;
  left:0;
  top:-.4rem;
  &::after{
   content:"";
   display: block;
   height:1.5rem;
   width:1.5rem;
   border-radius: 50%;
   position: absolute;
   top:50%;
   left:50%;
   transform: translate(-50%, -50%);
   background-color: $color-primary-light;
   opacity: 0;
   transition: all .2s;
  }

  // Our radio buttons have a dot surrounded by an outline. We will be using the pseudo element after to create the dot and the effect
 }
// This selector will activate when the radio button is chcked, then it will select it sibling element with ~ then we select it's direct child and use the pseudo class ::after to start the stylings of this element when the radio-input is chevked
 &__radio-input:checked ~ &__radio-label &__radio-button::after{
  opacity:1;
 }
}
